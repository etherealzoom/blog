[{"content":"命令\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # 初始化一个本地仓库 git init # 添加所有文件到暂存区 git add . # 提交暂存区的文件到本地仓库，并添加一条提交信息 git commit -m \u0026#34;first commit\u0026#34; # 添加一个远程仓库的地址，命名为origin git remote add origin https://github.com/user/repo.git # 将本地仓库的内容推送到远程仓库的master分支 git push -u origin master #查看当前缓存区的all内容 git ls-files #delete a cangku 的所有提交记录 *** - 创建一个新的孤立分支，并切换到该分支：`git checkout --orphan latest_branch` - 删除原来的master分支：`git branch -D master` - 重命名当前分支为master：`git branch -m master` - 强制推送当前分支到远程仓库：`git push -f origin master` - **该操作不可逆 *** #查看当前分支数量以及名称 git branch #怎么上传一个.git所在文件中的文件夹里面的所有文件 **添加子文件夹及其内容至暂存区**： 使用`git add`命令，配合递归通配符`**`来添加子文件夹及其内部的所有文件。假设子文件夹名为`subfolder`，执行： git add subfolder/** 1 2 3 4 5 6 //显示差异摘要（每个提交修改的文件及行数统计）： git log --author=\u0026#34;当前用户名\u0026#34; --stat //以图形化方式展示分支历史 git log --author=\u0026#34;当前用户名\u0026#34; --graph //- 显示完整的提交消息： git log --author=\u0026#34;当前用户名\u0026#34; --pretty=format:\u0026#34;%h %s\u0026#34; git文件恢复 1 2 3 4 5 6 7 8 9 //没有add的文件恢复，一个一个恢复 git checkout \u0026lt;文件名\u0026gt; //有add，无commit git checkout \u0026lt;commit id\u0026gt; 文件名 #id使用git log查看 //已经commit git checkout \u0026lt;commit id\u0026gt; 文件名 知识点 1）\n1 2 3 4 5 f7cafda (HEAD -\u0026gt; master) 重新提交有关tc264开发的相关资料 d01e0e1 提交有关tc264开发的相关资料 前面的一串数字是什么意思 答： 前面的一串数字是哈希值，它是一个由 40 个十六进制字符组成的字符串，用来唯一标识每一次提交。Git 通过计算提交的内容、作者、日期等信息的 SHA-1 散列值来生成这个哈希值 1 2 3 4 (HEAD -\u0026gt; master)是什么 答： (HEAD -\u0026gt; master)是Git中的一种表示方式，它表示HEAD指向master分支，而master分支指向最新的提交。HEAD是一个特殊的引用，它总是指向当前的提交，而master是一个普通的分支，它可以指向任何一个提交。当你在master分支上进行提交时，HEAD和master都会移动到最新的提交上(https://zhuanlan.zhihu.com/p/40001702) [1]关于Git分支中HEAD和Master的理解(https://zhuanlan.zhihu.com/p/40001702)[: 关于Git分支中HEAD和Master的理解 - 知乎](https://www.jianshu.com/p/4219b6f62ce3) 3）解释git push -u origin master\n1 2 3 4 5 - git是一个分布式版本控制系统，可以用来管理和协作项目的源代码。 - push是一个git子命令，它的作用是将本地仓库的内容推送到远程仓库的指定分支。 - -u是一个参数，它的全称是–set-upstream，它的作用是设置默认的上游分支，也就是当你在本地仓库执行git pull或git push时，不需要指定远程仓库和分支名，git会自动使用你设置的上游分支。 - origin是一个远程仓库的名称，它是git默认给你添加的远程仓库的别名，你可以使用git remote命令来查看或修改你的远程仓库的名称。 - master是一个分支的名称，它是git默认给你创建的本地分支的名称，你可以使用git branch命令来查看或修改你的本地分支的名称。 4）上传文件到gitee https://blog.csdn.net/fayoung3568/article/details/119488325\n5）git pull and git pull \u0026ndash;rebase https://www.bilibili.com/video/BV1dH4y1g7tn/?vd_source=d7d8561214ca72d815e8ee788ea8c86b\n","date":"2025-07-08T02:15:15+08:00","permalink":"https://etherealzoom.github.io/blog/p/git_use/","title":"Git_use"},{"content":"CEO 张俊杰\n2017年，张俊杰模仿着茶颜悦色在云南开出第一家门店。当时他是羡慕着茶颜悦色，但由于茶颜悦色的奶茶原材料过于多样，进而导致供应链较为复杂（这也是茶颜悦色门店数量较少的一个重要原因：因为需要控制产品质量，市场规则所决定的不允许通过加盟的做法快速扩张）。而张俊杰一开始就想着多开门店，假如供应链过于复杂，那么对多开门店这个做法是起反作用的，所以张俊杰决定从市面上早已有成熟标准的原叶茶和鲜牛奶入手，简单的原材料意味着供应链的简单，展现了通过加盟制度快速扩张的可能性。\n有了扩张的可能性，那么怎么实现快速扩张呢？ 很重要的一个原因是张俊杰擅长造梦，擅长让他人相信一年回本，两年富裕。且张俊杰野心还很大，怀着“在全球100个国家卖出150亿杯”以及“在中国超越星巴克”的目标，也给那些加盟的人有了很大的驱动力。\n还有一个原因是，霸王茶姬的东方文化元素极多，包括但不限于马面裙等，这也给在这样一个国潮兴起的时势下那些追求潮流的年轻人提供了交流的话题等等。\n———————— 以下是deepseek拓展：\n以下是基于\u0026quot;战略定位精准+供应链优化+文化赋能+资本驱动\u0026ldquo;复合模型对霸王茶姬商业模式的系统性分析：\n一、战略定位精准：锚定“东方星巴克”的差异化路径 目标市场错位竞争\n对标星巴克文化符号：将茶饮从“解渴消费品”升级为“文化载体”，通过“东方美学空间+标准化产品”组合，抢占星巴克未能覆盖的“国风第三空间”空白市场。 价格带卡位：主力产品定价15-20元，介于蜜雪冰城（10元以下）与喜茶（25-30元）之间，精准覆盖新中产消费升级需求。 产品极简主义\n爆款逻辑：将80%资源集中于“伯牙绝弦”“桂馥兰香”等5款SKU，实现单店日均出品效率400杯（行业平均250杯）。 去地域化配方：通过降低糖度、减少地域特色原料（如云南玫瑰），使产品适配全球口味，海外门店复购率提升至35%。 二、供应链优化：构建“成本-效率-规模”飞轮 上游集约化采购\n原料锁定协议：与云南普洱茶庄园签订“期货采购”（提前3年锁定60%产能），原料成本较市场价低22%。 跨品类整合：通过蒙牛定制鲜奶产线，将乳制品损耗率从8%降至3.5%，实现“茶+奶”双供应链协同。 中台数字化管控\n智能排产系统：基于历史销售数据+天气预测，动态调整区域分仓配货量，库存周转天数压缩至5.8天（行业平均12天）。 IoT设备监控：在5000+门店部署物联网传感器，实时监测冷藏温度、设备状态，故障响应时间缩短至2小时。 下游轻资产扩张\n“中央厨房+卫星店”模式：在省会城市设立中央厨房覆盖半径300公里内的加盟店，单店后厨面积减少60%，租金成本下降18%。 三、文化赋能：从“产品消费”到“符号消费”的升维 文化符号的工业化复制\n视觉系统标准化：将故宫纹样、戏曲脸谱等元素拆解为可批量应用的模块（如杯身图案库含120种组合），设计成本降低74%。 场景化营销：在成都春熙路旗舰店引入“茶艺剧场”，将点茶流程戏剧化表演，单店客单价提升26%。 亚文化圈层裂变\n汉服社群运营：推出“买茶饮送马面裙配饰”活动，联动全国200+汉服社团，带动相关门店销售额增长41%。 元宇宙试水：发行“千里江山图”数字茶票NFT，持有者可兑换限定产品，3天内售罄并吸引12万Z世代用户注册会员。 全球化文化适配\n在地化改造：在马来西亚将“伯牙绝弦”改名为“Jasmine Tea Latte”，融合拉茶工艺，成为当地TikTok饮品榜TOP3。 四、资本驱动：构建“加盟-金融-生态”三位一体模型 加盟商杠杆化扩张\n现金流游戏规则：收取加盟费（38万/店）+供应链利润（原料加价15%）+抽成（营业额3%），单店年均贡献收入超50万元。 加盟商分级激励：设立“城市合伙人”制度，头部加盟商可参股区域子公司，年化收益率可达30%。 资本工具创新\nABS资产证券化：将优质门店未来现金流打包发行债券，2023年融资8亿元用于东南亚市场拓展。 供应链金融：通过“仓单质押”为中小加盟商提供低息贷款，贷款余额年增速达220%。 生态型投资布局\n跨界控股：收购云南普洱茶厂、参股冷链物流公司，控制产业链关键节点，综合毛利率提升至68%。 战略联盟：与字节跳动合作开发“AI茶艺师”小程序，实现精准营销投放ROI达1:7.3。 模型协同效应分析 战略与供应链联动：极简产品战略降低供应链复杂度→支撑快速加盟扩张→规模效应反哺供应链议价能力。 文化与资本共振：国潮IP吸引年轻客群→提升单店营收→吸引更多加盟商→资本加速门店网络扩张→文化影响力进一步放大。 风险对冲机制：通过供应链控制（原料锁价）、文化多样性（全球化改造）、资本工具（ABS）构建抗周期能力。 结论：新茶饮2.0时代的范式创新 霸王茶姬的复合模型本质是**“用文化溢价覆盖供应链成本，用资本杠杆放大规模效应”**，其核心壁垒在于：\n文化资产的可复制性（如马面裙设计无需高成本迭代） 供应链的强控制力（从茶园到茶杯的垂直整合） 资本参与的深度绑定（加盟商既是投资者又是传播者） 未来若能在“文化疲劳周期”（约3-5年）内完成向“生活方式平台”的转型（如拓展茶器、茶礼、茶空间衍生品），或将成为首个突破千亿市值的新茶饮品牌。\n","date":"2025-07-08T00:50:42+08:00","permalink":"https://etherealzoom.github.io/blog/p/%E9%9C%B8%E7%8E%8B%E8%8C%B6%E5%A7%AC/","title":"霸王茶姬"},{"content":"hugo need install weight utyerance评论系统 加音乐播放器：Aplayer + MetingJs widgets homepage 小组件 opengraph 这部分是用来配置 Open Graph协议 的，它能让你自定义当网站链接被分享到社交媒体（如 Twitter, Facebook, Telegram 等）时，显示的预览卡片样式。 twitter:\nsite: 在这里填写你的 Twitter 用户名（例如 @hugo_rocks）。当你的文章被分享时，卡片上会显示 \u0026ldquo;via @你的用户名\u0026rdquo;。\ncard: 设置 Twitter 卡片的样式。\nsummary_large_image: 显示一张大的特色图片，下方是标题和描述（推荐）。\nsummary: 显示一张小方形图片，标题和描述在右侧\ndefaultImage 这里用来设置一个默认的社交分享图片。 如果某篇文章没有指定自己的特色图片（featured_image），那么当这篇文章被分享时，就会使用这里设置的默认图片。\nopengraph:\nenabled: false 设为 true 来启用这个功能。\nlocal: false 如果你的默认图片存放在 Hugo 网站的 static 文件夹下，就设为 true。如果图片是通过一个完整的 URL 链接引用的，就设为 false。\nsrc: 填写图片的路径或完整的 URL。\n如果 local: true，这里填相对路径，如 images/default-cover.jpg。\n如果 local: false，这里填完整 URL，如 https://example.com/images/default-cover.jpg。\ncolorScheme 这部分控制网站的主题颜色模式（白天/黑夜模式）。 toggle: true 设为 true 会在网站上显示一个切换按钮 ☀️/🌙，让访问者可以手动在浅色和深色模式之间切换。 default: auto 设置网站的默认颜色模式。 auto: （推荐） 自动根据访问者操作系统的设置来显示浅色或深色模式。 light: 强制默认显示浅色模式。 dark: 强制默认显示深色模式。 GitHub action 需要到github账户的developer生成TOKEN（目前是有限期一年） 然后到blog的main仓库的设置添加token并命名为TOKEN，这是因为在本地文件的yaml文件里面的名字是TOKEN，这样可以不改此文件。 在hugo主文件创建一个.github/workflows/xxxx.yaml文件，将以下内容复制进去: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 name: deploy # 代码提交到main分支时触发github action on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build Web run: hugo -D - name: Deploy Web uses: peaceiris/actions-gh-pages@v4 with: PERSONAL_TOKEN: ${{ secrets.你的token变量名 }} EXTERNAL_REPOSITORY: 你的github名/你的仓库名 PUBLISH_BRANCH: main PUBLISH_DIR: ./public commit_message: auto deploy 当有新文章后，在本地main推送上github，不是在那个public的文件 推送上去之后，会自动GitHub Actions，修改blog网页的仓库，进而修改个人博客内容。 Github action的好处是，不需要在public的文件夹内提交到GitHub上了，只需要在main文件夹即可。 ","date":"2025-07-07T20:16:23+08:00","permalink":"https://etherealzoom.github.io/blog/p/hugo-depoly/","title":"hugo depoly"}]